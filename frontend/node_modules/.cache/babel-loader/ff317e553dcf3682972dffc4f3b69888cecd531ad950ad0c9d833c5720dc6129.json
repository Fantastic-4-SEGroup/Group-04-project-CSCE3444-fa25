{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clair\\\\moodsync-d\\\\frontend\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoodSelector from '../components/MoodSelector';\nimport PlaylistView from '../components/PlaylistView';\nimport Calendar from '../components/Calendar';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [calendarEntries, setCalendarEntries] = useState([]);\n  useEffect(() => {\n    // Fetch calendar data on component mount\n    const fetchCalendar = async () => {\n      try {\n        const res = await api.get('/user/calendar');\n        setCalendarEntries(res.data.calendar);\n      } catch (err) {\n        console.error('Error fetching calendar', err);\n      }\n    };\n    fetchCalendar();\n  }, []);\n  const handleMoodSelected = async mood => {\n    try {\n      const res = await api.post('/playlists/generate', {\n        mood\n      });\n      setPlaylist(res.data.playlist);\n    } catch (err) {\n      console.error('Error generating playlist', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoodSelector, {\n      onMoodSelected: handleMoodSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlaylistView, {\n      playlist: playlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      entries: calendarEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"0ZKZmGmGtTJYMmXQHHIscKUu9rk=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","MoodSelector","PlaylistView","Calendar","api","jsxDEV","_jsxDEV","DashboardPage","_s","playlist","setPlaylist","calendarEntries","setCalendarEntries","fetchCalendar","res","get","data","calendar","err","console","error","handleMoodSelected","mood","post","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoodSelected","entries","_c","$RefreshReg$"],"sources":["C:/Users/clair/moodsync-d/frontend/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MoodSelector from '../components/MoodSelector';\nimport PlaylistView from '../components/PlaylistView';\nimport Calendar from '../components/Calendar';\nimport api from '../services/api';\n\nconst DashboardPage = () => {\n  const [playlist, setPlaylist] = useState([]);\n  const [calendarEntries, setCalendarEntries] = useState([]);\n\n  useEffect(() => {\n    // Fetch calendar data on component mount\n    const fetchCalendar = async () => {\n      try {\n        const res = await api.get('/user/calendar');\n        setCalendarEntries(res.data.calendar);\n      } catch (err) {\n        console.error('Error fetching calendar', err);\n      }\n    };\n    fetchCalendar();\n  }, []);\n\n  const handleMoodSelected = async (mood) => {\n    try {\n      const res = await api.post('/playlists/generate', { mood });\n      setPlaylist(res.data.playlist);\n    } catch (err) {\n      console.error('Error generating playlist', err);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Your Dashboard</h2>\n      <MoodSelector onMoodSelected={handleMoodSelected} />\n      <PlaylistView playlist={playlist} />\n      <Calendar entries={calendarEntries} />\n    </div>\n  );\n};\n\nexport default DashboardPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,gBAAgB,CAAC;QAC3CH,kBAAkB,CAACE,GAAG,CAACE,IAAI,CAACC,QAAQ,CAAC;MACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC/C;IACF,CAAC;IACDL,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,kBAAkB,GAAG,MAAOC,IAAI,IAAK;IACzC,IAAI;MACF,MAAMR,GAAG,GAAG,MAAMV,GAAG,CAACmB,IAAI,CAAC,qBAAqB,EAAE;QAAED;MAAK,CAAC,CAAC;MAC3DZ,WAAW,CAACI,GAAG,CAACE,IAAI,CAACP,QAAQ,CAAC;IAChC,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;IACjD;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBtB,OAAA,CAACL,YAAY;MAAC4B,cAAc,EAAER;IAAmB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDtB,OAAA,CAACJ,YAAY;MAACO,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpCtB,OAAA,CAACH,QAAQ;MAAC2B,OAAO,EAAEnB;IAAgB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACpB,EAAA,CAlCID,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAoCnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}